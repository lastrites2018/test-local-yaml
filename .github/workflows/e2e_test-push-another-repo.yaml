name: ÏàòÎèô e2e_test-push-another-repo

on:
  workflow_dispatch:
    inputs:
      name:
        description: "ÏàòÎèô Ïã§Ìñâ"
        required: false
        default: "vos-team"

jobs:
  dashboard_test:
    runs-on: ubuntu-latest
    steps:
      - name: github checkout
        uses: actions/checkout@v3
        with:
          # Î∞îÍøîÏïº Ìï®.
          ref: main
          #   ref: dev
          token: ${{ secrets.GIT_HUB_TOKEN }}

      - name: slack notification (start)
        uses: ./.github/actions/slack-notify
        with:
          status_output: "ÌÖåÏä§Ìä∏Î•º ÏãúÏûëÌï©ÎãàÎã§. üë®‚Äçüî¨"
          token: ${{ secrets.SLACK_TOKEN }}

      - name: setup-node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          node-version: "18.x"
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Use Playwright version as part of the cache key
      # AFAIK this is a x-platform way to get your installed Playwright version.
      # Be sure to be diligent in specifying ^, ~, or locked versions.
      - run: |
          echo "PLAYWRIGHT_VERSION=$(node -e "process.stdout.write(require('@playwright/test/package.json').version)")" >> $GITHUB_OUTPUT
        id: playwright-version

      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        env:
          # Playwright uses this env var for the browser install path. See:
          # https://playwright.dev/docs/ci#directories-to-cache
          # It makes most sense to default this to something cross-platform
          PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright
        with:
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.PLAYWRIGHT_VERSION }}
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          # key: cache-playwright-linux-1.34.3

      - name: Install playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
      - name: Install playwright system dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Run tests
        run: yarn test:boa

      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 3

      # - name: Pushes to another repository
      #   uses: cpina/github-action-push-to-another-repository@main
      #   if: success() || failure()
      #   env:
      #     SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
      #   with:
      #     source-directory: "playwright-report"
      #     destination-github-username: "lastrites2018"
      #     destination-repository-name: "vos-test-report-frontend"
      #     user-email: lastrites@nate.com
      #     target-branch: gh-pages

  publish_report:
    name: Publish HTML Report
    # using always() is not ideal here, because it would also run if the workflow was cancelled
    if: success() || needs.dashboard_test.result == 'failure'
    needs: [dashboard_test]
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      # Unique URL path for each workflow run attempt
      HTML_REPORT_URL_PATH: reports/${{ github.ref_name }}/${{ github.run_id }}/${{ github.run_attempt }}
    steps:
      - name: Checkout GitHub Pages Branch
        uses: actions/checkout@v3
        with:
          repository: lastrites2018/vos-test-report-frontend
          ref: gh-pages
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}
      - name: Set Git User
        # see: https://github.com/actions/checkout/issues/13#issuecomment-724415212
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Download zipped HTML report
        uses: actions/download-artifact@v3
        with:
          name: playwright-report
          path: ${{ env.HTML_REPORT_URL_PATH }}
      - name: Push HTML Report
        timeout-minutes: 3
        # commit report, then try push-rebase-loop until it's able to merge the HTML report to the gh-pages branch
        # this is necessary when this job is running at least twice at the same time (e.g. through two pushes at the same time)
        run: |
          git add .
          git commit -m "workflow: add HTML report for run-id ${{ github.run_id }} (attempt:  ${{ github.run_attempt }}) https://${{github.repository_owner}}.github.io/vos-test-report-frontend/$HTML_REPORT_URL_PATH"

          while true; do
            git pull --rebase
            if [ $? -ne 0 ]; then
              echo "Failed to rebase. Please review manually."
              exit 1
            fi

            git push
            if [ $? -eq 0 ]; then
              echo "Successfully pushed HTML report to repo."
              exit 0
            fi
          done

      - name: Output Report URL as Worfklow Annotation
        id: full-html-report-url
        run: |
          FULL_HTML_REPORT_URL=https://${{github.repository_owner}}.github.io/vos-test-report-frontend/$HTML_REPORT_URL_PATH
          echo "::notice title=üìã Published Playwright Test Report::$FULL_HTML_REPORT_URL"
          echo "::set-output name=full-html-report-url::$FULL_HTML_REPORT_URL"

    outputs:
      full-html-report-url: ${{ steps.full-html-report-url.outputs.full-html-report-url}}

  slack_notification:
    name: slack notification (end)
    if: success() || needs.dashboard_test.result == 'failure'
    runs-on: ubuntu-latest
    needs: [dashboard_test, publish_report]
    steps:
      - name: github checkout
        uses: actions/checkout@v3
        with:
          # Î∞îÍøîÏïº Ìï®.
          ref: main
          token: ${{ secrets.GIT_HUB_TOKEN }}

      - name: slack notification (success)
        if: needs.dashboard_test.result == 'success'
        uses: ./.github/actions/slack-notify
        with:
          status_output: "ÌÖåÏä§Ìä∏ Í≤∞Í≥º : ÏÑ±Í≥µ‚úÖ"
          token: ${{ secrets.SLACK_TOKEN }}

      - name: slack notification (cancel)
        if: needs.dashboard_test.result == 'cancelled'
        uses: ./.github/actions/slack-notify
        with:
          status_output: "ÌÖåÏä§Ìä∏ Í≤∞Í≥º : Ï∑®ÏÜåü§´"
          token: ${{ secrets.SLACK_TOKEN }}

      - name: slack notification (fail)
        if: needs.dashboard_test.result == 'failure'
        uses: ./.github/actions/slack-notify
        with:
          status_output: "ÌÖåÏä§Ìä∏ Í≤∞Í≥º : Ïã§Ìå®‚ùå ${{needs.publish_report.outputs.full-html-report-url}}"
          token: ${{ secrets.SLACK_TOKEN }}

      # - name: ÏïÑÏõÉÌíã ÌÖåÏä§Ìä∏ ${{needs.publish_report.outputs.full-html-report-url}}
      #   run: |
      #     echo ""
